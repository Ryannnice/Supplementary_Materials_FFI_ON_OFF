<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OutputJob\ColiasSenseV4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OutputJob\ColiasSenseV4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jul 03 14:57:35 2024
<BR><P>
<H3>Maximum Stack Usage =        536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CoS_SenseBoard_Init &rArr; Cos_Motion_structInit &rArr; CoS_Motion_Init &rArr; CoS_MotionParameter_Init &rArr; ColiasBasicITEvents_Check &rArr; ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[fb]">UARTn_putc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fb]">UARTn_putc</a><BR>
 <LI><a href="#[14c]">delay_short</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">delay_short</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[98]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[68]">CoS_DCMI_DMAXferCplt</a> from coliassense_camera.o(i.CoS_DCMI_DMAXferCplt) referenced from coliassense_camera.o(i.CoS_CAM_DMASet)
 <LI><a href="#[69]">DCMI_DMAError</a> from stm32f4xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32f4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
 <LI><a href="#[69]">DCMI_DMAError</a> from stm32f4xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[6a]">DCMI_DMAXferCplt</a> from stm32f4xx_hal_dcmi.o(i.DCMI_DMAXferCplt) referenced from stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from stm32f4xx_it.o(i.DCMI_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[61]">DMA2D_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f4xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f427xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[64]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f427xx.o(.text)
 <LI><a href="#[66]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[65]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[6b]">fputc</a> from coliassense_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[67]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[62]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(.text)
</UL>
<P><STRONG><a name="[187]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[188]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[189]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>arm_cos_f32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLED_ColorCalc
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_commandcpy
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_motion_control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_getopt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Help_old
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Help
</UL>

<P><STRONG><a name="[156]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CMD_StringParse
</UL>

<P><STRONG><a name="[6e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_gets
</UL>

<P><STRONG><a name="[72]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getu
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLED_ColorCalc
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valprint
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_valSet
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_outrangeReport
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_selfCalibration_run
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[190]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[191]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[192]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[67]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[85]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[193]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[7c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[77]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[76]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[195]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[84]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[8d]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[65]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[8f]"></a>BackgroundTask_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coliassense_bio.o(i.BackgroundTask_Disable))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
</UL>

<P><STRONG><a name="[91]"></a>BackgroundTask_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coliassense_bio.o(i.BackgroundTask_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>BitSetColiasBasicReg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, coliassence_motion.o(i.BitSetColiasBasicReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BitSetColiasBasicReg &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>CAM_DCMI_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, coliassense_camera.o(i.CAM_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAM_DCMI_Init &rArr; CAM_DCMI_IO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_IO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_DMA_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
</UL>

<P><STRONG><a name="[a5]"></a>CoS_BIO_Init</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, coliassense_bio.o(i.CoS_BIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CoS_BIO_Init &rArr; CoS_SystemClock_Config &rArr; HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Toggle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM2_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_LED_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Keys_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_structInit
</UL>

<P><STRONG><a name="[ad]"></a>CoS_BIO_Toggle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coliassense_bio.o(i.CoS_BIO_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decision_making
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[e6]"></a>CoS_BIO_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, coliassense_bio.o(i.CoS_BIO_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[b0]"></a>CoS_BIO_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coliassense_bio.o(i.CoS_BIO_read))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_structInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>CoS_BIO_structInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, coliassense_board.o(i.CoS_BIO_structInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CoS_BIO_structInit &rArr; CoS_BIO_Init &rArr; CoS_SystemClock_Config &rArr; HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[ae]"></a>CoS_BIO_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coliassense_bio.o(i.CoS_BIO_write))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[b4]"></a>CoS_CAM_DMASet</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, coliassense_camera.o(i.CoS_CAM_DMASet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CoS_CAM_DMASet &rArr; HAL_DCMI_Start_DMA &rArr; HAL_DMAEx_MultiBufferStart_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>CoS_CAM_Init</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, coliassense_camera.o(i.CoS_CAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CoS_CAM_Init &rArr; CAM_SCCB_Init &rArr; CoS_sI2C_Init &rArr; CoS_sI2C_StateReport &rArr; CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_WriteReg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_camera_StateReport
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_cameraReset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_ReadID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SCCB_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_IT_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_cam_structInit
</UL>

<P><STRONG><a name="[bc]"></a>CoS_CAM_ReadID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, coliassense_camera.o(i.CoS_CAM_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CoS_CAM_ReadID &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
</UL>

<P><STRONG><a name="[c0]"></a>CoS_CAM_Start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, coliassense_camera.o(i.CoS_CAM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CoS_CAM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>CoS_CAM_cameraReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coliassense_camera.o(i.CoS_CAM_cameraReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CoS_CAM_cameraReset &rArr; CoS_sI2C_WriteReg &rArr; sI2C_WriteReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
</UL>

<P><STRONG><a name="[c1]"></a>CoS_CLED_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, coliassense_cled.o(i.CoS_CLED_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CoS_CLED_Enable &rArr; HAL_TIM_PWM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[c5]"></a>CoS_CLED_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, coliassense_cled.o(i.CoS_CLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CoS_CLED_Init &rArr; CoS_TIM1_Init &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_RNG_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_GPIO_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDCC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_StateReport
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_structInit
</UL>

<P><STRONG><a name="[c9]"></a>CoS_CLED_StateReport</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, coliassense_cled.o(i.CoS_CLED_StateReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CoS_CLED_StateReport &rArr; CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Pin_StateReport
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Init
</UL>

<P><STRONG><a name="[a4]"></a>CoS_CLED_setRGB</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, coliassense_cled.o(i.CoS_CLED_setRGB))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLED_RandomGo
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_LED_Update
</UL>

<P><STRONG><a name="[cb]"></a>CoS_CLED_structInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, coliassense_board.o(i.CoS_CLED_structInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CoS_CLED_structInit &rArr; CoS_CLED_Init &rArr; CoS_TIM1_Init &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[cd]"></a>CoS_EXBD_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, coliassense_exbd.o(i.CoS_EXBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CoS_EXBD_Init &rArr; CoS_EXBD_check &rArr; CoS_EXBD_checkPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_ExBD_IO_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_check
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_structInit
</UL>

<P><STRONG><a name="[ce]"></a>CoS_EXBD_check</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, coliassense_exbd.o(i.CoS_EXBD_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CoS_EXBD_check &rArr; CoS_EXBD_checkPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_checkPin
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_Init
</UL>

<P><STRONG><a name="[d0]"></a>CoS_EXBD_checkPin</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, coliassense_exbd.o(i.CoS_EXBD_checkPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CoS_EXBD_checkPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_check
</UL>

<P><STRONG><a name="[d1]"></a>CoS_EXBD_structInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, coliassense_board.o(i.CoS_EXBD_structInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CoS_EXBD_structInit &rArr; CoS_EXBD_Init &rArr; CoS_EXBD_check &rArr; CoS_EXBD_checkPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_SetBaud
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[d3]"></a>CoS_LED_Update</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, coliassense_cled.o(i.CoS_LED_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoS_LED_Update &rArr; CLED_RandomGo &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLED_RandomGo
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLED_ColorCalc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_setRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_IRQ_Task
</UL>

<P><STRONG><a name="[e8]"></a>CoS_MCUID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, coliassense_bio.o(i.CoS_MCUID))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
</UL>

<P><STRONG><a name="[d4]"></a>CoS_MotionEXIT_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, coliassence_motion.o(i.CoS_MotionEXIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CoS_MotionEXIT_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Motion_Init
</UL>

<P><STRONG><a name="[d5]"></a>CoS_MotionParameter_Init</STRONG> (Thumb, 1846 bytes, Stack size 168 bytes, coliassence_motion.o(i.CoS_MotionParameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CoS_MotionParameter_Init &rArr; ColiasBasicITEvents_Check &rArr; ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicTCRT_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicMotion_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicMotionControler_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicLightS_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicLED_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicInfrared_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicIT_Enable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicITEvents_Check
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Toggle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Motion_Init
</UL>

<P><STRONG><a name="[de]"></a>CoS_Motion_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, coliassence_motion.o(i.CoS_Motion_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CoS_Motion_Init &rArr; CoS_MotionParameter_Init &rArr; ColiasBasicITEvents_Check &rArr; ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionEXIT_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_reg_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos_Motion_structInit
</UL>

<P><STRONG><a name="[ca]"></a>CoS_Pin_StateReport</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, coliassense_bio.o(i.CoS_Pin_StateReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_StateReport
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_StateReport
</UL>

<P><STRONG><a name="[163]"></a>CoS_Restart</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, coliassense_bio.o(i.CoS_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
</UL>

<P><STRONG><a name="[e1]"></a>CoS_SenseBoard_Init</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, coliassense_board.o(i.CoS_SenseBoard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = CoS_SenseBoard_Init &rArr; Cos_Motion_structInit &rArr; CoS_Motion_Init &rArr; CoS_MotionParameter_Init &rArr; ColiasBasicITEvents_Check &rArr; ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Param_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MCUID
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos_Motion_structInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_MPU_structInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_cam_structInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART1_structInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_structInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_structInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_structInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>CoS_TIM3_IRQ_Task</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, coliassense_board.o(i.CoS_TIM3_IRQ_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CoS_TIM3_IRQ_Task &rArr; CoS_LED_Update &rArr; CLED_RandomGo &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit_run
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_LED_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>CoS_UART1_structInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, coliassense_board.o(i.CoS_UART1_structInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CoS_UART1_structInit &rArr; CoS_UART_Init &rArr; CoS_UART_PeripheralInit &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[10d]"></a>CoS_UART_Enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, coliassense_uart.o(i.CoS_UART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos_Motion_structInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>CoS_UART_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, coliassense_uart.o(i.CoS_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CoS_UART_Init &rArr; CoS_UART_PeripheralInit &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_StateReport
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_RegInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_PeripheralInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos_Motion_structInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART1_structInit
</UL>

<P><STRONG><a name="[103]"></a>CoS_UART_ReceiveByte</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, coliassense_uart.o(i.CoS_UART_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CoS_UART_ReceiveByte &rArr; CoS_UART_ByteDeal &rArr; CoS_UART_RxRST
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_ByteDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>CoS_UART_RxRST</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, coliassense_uart.o(i.CoS_UART_RxRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CoS_UART_RxRST
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_UART_BUFF
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos_Motion_structInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_ByteDeal
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_commandcpy
</UL>

<P><STRONG><a name="[d2]"></a>CoS_UART_SetBaud</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, coliassense_uart.o(i.CoS_UART_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CoS_UART_SetBaud &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_structInit
</UL>

<P><STRONG><a name="[ff]"></a>CoS_UART_StateReport</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, coliassense_uart.o(i.CoS_UART_StateReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CoS_UART_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Init
</UL>

<P><STRONG><a name="[14b]"></a>CoS_UART_sendFrame</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, coliassense_uart.o(i.CoS_UART_sendFrame))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Help_old
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Help
</UL>

<P><STRONG><a name="[e4]"></a>CoS_cam_structInit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, coliassense_board.o(i.CoS_cam_structInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CoS_cam_structInit &rArr; CoS_CAM_Init &rArr; CAM_SCCB_Init &rArr; CoS_sI2C_Init &rArr; CoS_sI2C_StateReport &rArr; CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[be]"></a>CoS_camera_StateReport</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, coliassense_camera.o(i.CoS_camera_StateReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CoS_camera_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
</UL>

<P><STRONG><a name="[9f]"></a>CoS_sI2C_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, coliassense_interfaces.o(i.CoS_sI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CoS_sI2C_Init &rArr; CoS_sI2C_StateReport &rArr; CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_TxRST
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_StateReport
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_IO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SCCB_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_MPU_structInit
</UL>

<P><STRONG><a name="[e3]"></a>CoS_sI2C_MPU_structInit</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, coliassense_board.o(i.CoS_sI2C_MPU_structInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CoS_sI2C_MPU_structInit &rArr; CoS_sI2C_Init &rArr; CoS_sI2C_StateReport &rArr; CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[bf]"></a>CoS_sI2C_ReadReg</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, coliassense_interfaces.o(i.CoS_sI2C_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_ReadID
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Camera
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getTemp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getGz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getGy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getGx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getAz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getAy
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getAx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBit
</UL>

<P><STRONG><a name="[109]"></a>CoS_sI2C_StateReport</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, coliassense_interfaces.o(i.CoS_sI2C_StateReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CoS_sI2C_StateReport &rArr; CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Pin_StateReport
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_Init
</UL>

<P><STRONG><a name="[108]"></a>CoS_sI2C_TxRST</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, coliassense_interfaces.o(i.CoS_sI2C_TxRST))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_Init
</UL>

<P><STRONG><a name="[bd]"></a>CoS_sI2C_WriteReg</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, coliassense_interfaces.o(i.CoS_sI2C_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CoS_sI2C_WriteReg &rArr; sI2C_WriteReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_cameraReset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Camera
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBit
</UL>

<P><STRONG><a name="[dd]"></a>ColiasBasicITEvents_Check</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, coliassence_motion.o(i.ColiasBasicITEvents_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ColiasBasicITEvents_Check &rArr; ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[dc]"></a>ColiasBasicIT_Enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, coliassence_motion.o(i.ColiasBasicIT_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ColiasBasicIT_Enable &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[d9]"></a>ColiasBasicInfrared_Config</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, coliassence_motion.o(i.ColiasBasicInfrared_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ColiasBasicInfrared_Config &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[d6]"></a>ColiasBasicLED_Config</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, coliassence_motion.o(i.ColiasBasicLED_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ColiasBasicLED_Config &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[d8]"></a>ColiasBasicLightS_Config</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, coliassence_motion.o(i.ColiasBasicLightS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ColiasBasicLightS_Config &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[da]"></a>ColiasBasicMotionControler_Config</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, coliassence_motion.o(i.ColiasBasicMotionControler_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ColiasBasicMotionControler_Config &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[db]"></a>ColiasBasicMotion_Config</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, coliassence_motion.o(i.ColiasBasicMotion_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ColiasBasicMotion_Config &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[d7]"></a>ColiasBasicTCRT_Config</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, coliassence_motion.o(i.ColiasBasicTCRT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ColiasBasicTCRT_Config &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithoutACKToColiasBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
</UL>

<P><STRONG><a name="[e5]"></a>Cos_Motion_structInit</STRONG> (Thumb, 162 bytes, Stack size 224 bytes, coliassense_board.o(i.Cos_Motion_structInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Cos_Motion_structInit &rArr; CoS_Motion_Init &rArr; CoS_MotionParameter_Init &rArr; ColiasBasicITEvents_Check &rArr; ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_RxRST
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Motion_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCMI_IRQHandler &rArr; HAL_DCMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>Decision_making</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, coliassense_lgmd.o(i.Decision_making))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Decision_making &rArr; fast_motion_control &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_motion_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coliassense_bio.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_DMA_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM2_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_PeripheralInit
</UL>

<P><STRONG><a name="[105]"></a>Flush_UART_BUFF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, coliassense_uart.o(i.Flush_UART_BUFF))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_RxRST
</UL>

<P><STRONG><a name="[10e]"></a>HAL_DCMI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAError
</UL>

<P><STRONG><a name="[117]"></a>HAL_DCMI_FrameEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_FrameEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_DCMI_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DCMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_LineEventCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_DCMI_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32f4xx_hal_dcmi_ex.o(i.HAL_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DCMI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_DCMI_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_DCMI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_DCMI_Start_DMA</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DCMI_Start_DMA &rArr; HAL_DMAEx_MultiBufferStart_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_DMASet
</UL>

<P><STRONG><a name="[116]"></a>HAL_DCMI_VsyncEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coliassense_camera.o(i.HAL_DCMI_VsyncEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_DMAEx_ChangeMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_dma_ex.o(i.HAL_DMAEx_ChangeMemory))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_DCMI_DMAXferCplt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAXferCplt
</UL>

<P><STRONG><a name="[11a]"></a>HAL_DMAEx_MultiBufferStart_IT</STRONG> (Thumb, 2986 bytes, Stack size 40 bytes, stm32f4xx_hal_dma_ex.o(i.HAL_DMAEx_MultiBufferStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMAEx_MultiBufferStart_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[114]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_DMA_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[120]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_IO_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_ExBD_IO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionEXIT_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_LED_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Keys_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_IO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_checkPin
</UL>

<P><STRONG><a name="[b1]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WaitAck
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_checkPin
</UL>

<P><STRONG><a name="[af]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Toggle
</UL>

<P><STRONG><a name="[b3]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_ExBD_IO_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WaitAck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Stop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_NoAck
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_checkPin
</UL>

<P><STRONG><a name="[11c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>

<P><STRONG><a name="[14f]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[121]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[90]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackgroundTask_Disable
</UL>

<P><STRONG><a name="[92]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackgroundTask_Enable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionEXIT_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Keys_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_PeripheralInit
</UL>

<P><STRONG><a name="[99]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_DMA_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionEXIT_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Keys_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_PeripheralInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[122]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_Init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 732 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[124]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[125]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_MCOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
</UL>

<P><STRONG><a name="[a3]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLED_RandomGo
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RNG_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_RNG_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
</UL>

<P><STRONG><a name="[128]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SystemClock_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[127]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM2_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM2_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM2_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM2_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM1_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Enable
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_DeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_PeripheralInit
</UL>

<P><STRONG><a name="[104]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_ReceiveByte
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_SetBaud
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_PeripheralInit
</UL>

<P><STRONG><a name="[134]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, coliassense_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_PeripheralInit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>IICwriteBit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, coliassense_mpu9250.o(i.IICwriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IICwriteBit &rArr; CoS_sI2C_WriteReg &rArr; sI2C_WriteReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_WriteReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tilt_detection_init
</UL>

<P><STRONG><a name="[137]"></a>IICwriteBits</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, coliassense_mpu9250.o(i.IICwriteBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IICwriteBits &rArr; CoS_sI2C_WriteReg &rArr; sI2C_WriteReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_WriteReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tilt_detection_init
</UL>

<P><STRONG><a name="[138]"></a>IMU_getValues</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, coliassense_mpu9250.o(i.IMU_getValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IMU_getValues &rArr; MPU9250_getTemp &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getTemp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getGz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getGy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getGx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getAz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getAy
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_getAx
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_selfCalibration_run
</UL>

<P><STRONG><a name="[140]"></a>LGMD_Calculating</STRONG> (Thumb, 1452 bytes, Stack size 72 bytes, coliassense_lgmd.o(i.LGMD_Calculating))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LGMD_Calculating &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Calculate_none
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Calculate_ON_and_OFF
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Calculate_ON
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Calculate_OFF
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_demo
</UL>

<P><STRONG><a name="[e7]"></a>LGMD_Param_Init</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, coliassense_lgmd.o(i.LGMD_Param_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LGMD_Param_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
</UL>

<P><STRONG><a name="[148]"></a>LGMD_demo</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, coliassense_lgmd.o(i.LGMD_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LGMD_demo &rArr; LGMD_Calculating &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>MPU9250_getAx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.MPU9250_getAx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_getAx &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[13a]"></a>MPU9250_getAy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.MPU9250_getAy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_getAy &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[13b]"></a>MPU9250_getAz</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.MPU9250_getAz))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_getAz &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[13c]"></a>MPU9250_getGx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.MPU9250_getGx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_getGx &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[13d]"></a>MPU9250_getGy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.MPU9250_getGy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_getGy &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[13e]"></a>MPU9250_getGz</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.MPU9250_getGz))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_getGz &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[13f]"></a>MPU9250_getTemp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.MPU9250_getTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_getTemp &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[149]"></a>MPU_selfCalibration_run</STRONG> (Thumb, 420 bytes, Stack size 96 bytes, coliassense_mpu9250.o(i.MPU_selfCalibration_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MPU_selfCalibration_run &rArr; IMU_getValues &rArr; MPU9250_getTemp &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_detect_reset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tilt_detection_init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>ReadBytesWithACKFromColiasBasic</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, coliassence_motion.o(i.ReadBytesWithACKFromColiasBasic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit_run
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_RxRST
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_sendFrame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decision_making
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicITEvents_Check
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSetColiasBasicReg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>S_Calculate_OFF</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, coliassense_lgmd.o(i.S_Calculate_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S_Calculate_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>

<P><STRONG><a name="[143]"></a>S_Calculate_ON</STRONG> (Thumb, 506 bytes, Stack size 44 bytes, coliassense_lgmd.o(i.S_Calculate_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = S_Calculate_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>

<P><STRONG><a name="[144]"></a>S_Calculate_ON_and_OFF</STRONG> (Thumb, 942 bytes, Stack size 76 bytes, coliassense_lgmd.o(i.S_Calculate_ON_and_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = S_Calculate_ON_and_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>

<P><STRONG><a name="[141]"></a>S_Calculate_none</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, coliassense_lgmd.o(i.S_Calculate_none))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = S_Calculate_none
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>

<P><STRONG><a name="[14d]"></a>SendFrame</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, user_terminal.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendFrame &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Camera
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TIM3_IRQHandler &rArr; UT_TermDeal &rArr; UT_CM_SYS &rArr; UT_valSet &rArr; UT_argCheck &rArr; UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_IRQ_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[133]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[12f]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[14a]"></a>Tilt_detect_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, coliassense_mpu9250.o(i.Tilt_detect_reset))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tilt_detection_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_selfCalibration_run
</UL>

<P><STRONG><a name="[150]"></a>TimingDelay_Decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, delay.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART4_IRQHandler &rArr; CoS_UART_ReceiveByte &rArr; CoS_UART_ByteDeal &rArr; CoS_UART_RxRST
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_ReceiveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>UART_transmit_run</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, coliassense_uart.o(i.UART_transmit_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CPtP_frameStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CPtP_frameEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_TIM3_IRQ_Task
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
</UL>

<P><STRONG><a name="[fb]"></a>UARTn_putc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coliassense_uart.o(i.UARTn_putc))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_putc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CPtP_frameStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CPtP_frameEnd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_ByteDeal
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; CoS_UART_ReceiveByte &rArr; CoS_UART_ByteDeal &rArr; CoS_UART_RxRST
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_ReceiveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>UT_CMD_StringParse</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, user_terminal.o(i.UT_CMD_StringParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UT_CMD_StringParse &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
</UL>

<P><STRONG><a name="[157]"></a>UT_CM_Camera</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, user_terminal.o(i.UT_CM_Camera))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UT_CM_Camera &rArr; UT_val_getu &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_WriteReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getu
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_getopt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
</UL>

<P><STRONG><a name="[15a]"></a>UT_CM_IMU</STRONG> (Thumb, 454 bytes, Stack size 80 bytes, user_terminal.o(i.UT_CM_IMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = UT_CM_IMU &rArr; UT_valSet &rArr; UT_argCheck &rArr; UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_WriteReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getu
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_valSet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_getopt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_SB_valSet_old
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tilt_detection_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_detect_reset
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
</UL>

<P><STRONG><a name="[15f]"></a>UT_CM_Motion</STRONG> (Thumb, 834 bytes, Stack size 88 bytes, user_terminal.o(i.UT_CM_Motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UT_CM_Motion &rArr; UT_val_getu &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSetColiasBasicReg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getu
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_getopt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Help_old
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
</UL>

<P><STRONG><a name="[162]"></a>UT_CM_SYS</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, user_terminal.o(i.UT_CM_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = UT_CM_SYS &rArr; UT_valSet &rArr; UT_argCheck &rArr; UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MCUID
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Restart
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getu
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_valSet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_getopt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
</UL>

<P><STRONG><a name="[167]"></a>UT_FlushBuff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, user_terminal.o(i.UT_FlushBuff))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Init
</UL>

<P><STRONG><a name="[161]"></a>UT_Help_old</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_terminal.o(i.UT_Help_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UT_Help_old
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_sendFrame
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
</UL>

<P><STRONG><a name="[166]"></a>UT_Init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, user_terminal.o(i.UT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_FlushBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>UT_SB_valSet_old</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, user_terminal.o(i.UT_SB_valSet_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = UT_SB_valSet_old &rArr; UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valprint
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_gets
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
</UL>

<P><STRONG><a name="[151]"></a>UT_TermDeal</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, user_terminal.o(i.UT_TermDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = UT_TermDeal &rArr; UT_CM_SYS &rArr; UT_valSet &rArr; UT_argCheck &rArr; UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_transmit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_getopt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_commandcpy
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Help_old
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_FlushBuff
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Camera
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CMD_StringParse
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>UT_argCheck</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, user_terminal.o(i.UT_argCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = UT_argCheck &rArr; UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_gets
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_outrangeReport
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Help
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_valSet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
</UL>

<P><STRONG><a name="[16c]"></a>UT_commandcpy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, user_terminal.o(i.UT_commandcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UT_commandcpy &rArr; CoS_UART_RxRST
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_RxRST
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
</UL>

<P><STRONG><a name="[158]"></a>UT_getopt</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, user_terminal.o(i.UT_getopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UT_getopt
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Camera
</UL>

<P><STRONG><a name="[16e]"></a>UT_outrangeReport</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, user_terminal.o(i.UT_outrangeReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UT_outrangeReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
</UL>

<P><STRONG><a name="[15d]"></a>UT_valSet</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, user_terminal.o(i.UT_valSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UT_valSet &rArr; UT_argCheck &rArr; UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
</UL>

<P><STRONG><a name="[169]"></a>UT_val_getf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, user_terminal.o(i.UT_val_getf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UT_val_getf &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_SB_valSet_old
</UL>

<P><STRONG><a name="[16a]"></a>UT_val_gets</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, user_terminal.o(i.UT_val_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UT_val_gets &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_SB_valSet_old
</UL>

<P><STRONG><a name="[159]"></a>UT_val_getu</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, user_terminal.o(i.UT_val_getu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UT_val_getu &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_SB_valSet_old
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Camera
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[16b]"></a>Valprint</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, user_terminal.o(i.Valprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Valprint &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_SB_valSet_old
</UL>

<P><STRONG><a name="[95]"></a>WriteBytesWithACKToColiasBasic</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, coliassence_motion.o(i.WriteBytesWithACKToColiasBasic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit_run
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_RxRST
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_sendFrame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_motion_control
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicTCRT_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicMotion_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicMotionControler_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicLightS_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicLED_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicInfrared_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicIT_Enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSetColiasBasicReg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
</UL>

<P><STRONG><a name="[10c]"></a>WriteBytesWithoutACKToColiasBasic</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, coliassence_motion.o(i.WriteBytesWithoutACKToColiasBasic))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_sendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicTCRT_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicMotion_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicMotionControler_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicLightS_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicLED_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicInfrared_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColiasBasicIT_Enable
</UL>

<P><STRONG><a name="[171]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[196]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b7]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_camera_StateReport
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Param_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Motion_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_structInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_MotionParameter_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_StateReport
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_StateReport
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Pin_StateReport
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_StateReport
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_transmit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valprint
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_valSet
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_outrangeReport
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_SB_valSet_old
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Motion
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_Camera
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tilt_detection_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_selfCalibration_run
</UL>

<P><STRONG><a name="[197]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[198]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[17a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[199]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[146]"></a>__hardfp_exp</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>

<P><STRONG><a name="[147]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_Calculating
</UL>

<P><STRONG><a name="[170]"></a>__hardfp_strtof</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_val_getf
</UL>

<P><STRONG><a name="[179]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[173]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[176]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[178]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[19a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[175]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[8e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[b9]"></a>delay_ms</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos_Motion_structInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_selfCalibration_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_checkPin
</UL>

<P><STRONG><a name="[14c]"></a>delay_short</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.delay_short))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytesWithACKFromColiasBasic
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WaitAck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Stop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_NoAck
</UL>

<P><STRONG><a name="[112]"></a>fast_motion_control</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, coliassence_motion.o(i.fast_motion_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fast_motion_control &rArr; WriteBytesWithACKToColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decision_making
</UL>

<P><STRONG><a name="[6b]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, coliassense_uart.o(i.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = main &rArr; CoS_SenseBoard_Init &rArr; Cos_Motion_structInit &rArr; CoS_Motion_Init &rArr; CoS_MotionParameter_Init &rArr; ColiasBasicITEvents_Check &rArr; ReadBytesWithACKFromColiasBasic &rArr; UART_transmit_run &rArr; UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytesWithACKToColiasBasic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LGMD_demo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decision_making
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_SenseBoard_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_DMASet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackgroundTask_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[14e]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[15e]"></a>tilt_detection_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, coliassense_mpu9250.o(i.tilt_detection_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tilt_detection_init &rArr; MPU_selfCalibration_run &rArr; IMU_getValues &rArr; MPU9250_getTemp &rArr; CoS_sI2C_ReadReg &rArr; sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_detect_reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_selfCalibration_run
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_IMU
</UL>

<P><STRONG><a name="[168]"></a>timed_data_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, user_terminal.o(i.timed_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_Init
</UL>

<P><STRONG><a name="[164]"></a>timed_data_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, user_terminal.o(i.timed_data_set))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_set_task
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_set_start
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_set_period
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_CM_SYS
</UL>

<P><STRONG><a name="[16d]"></a>timed_data_transmit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, user_terminal.o(i.timed_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timed_data_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_TermDeal
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>CAM_DCMI_DMA_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, coliassense_camera.o(i.CAM_DCMI_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAM_DCMI_DMA_Init &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_Init
</UL>

<P><STRONG><a name="[9a]"></a>CAM_DCMI_IO_Init</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, coliassense_camera.o(i.CAM_DCMI_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAM_DCMI_IO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_DCMI_Init
</UL>

<P><STRONG><a name="[ba]"></a>CAM_IT_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coliassense_camera.o(i.CAM_IT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
</UL>

<P><STRONG><a name="[9e]"></a>CAM_SCCB_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, coliassense_camera.o(i.CAM_SCCB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CAM_SCCB_Init &rArr; CoS_sI2C_Init &rArr; CoS_sI2C_StateReport &rArr; CoS_Pin_StateReport &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CAM_Init
</UL>

<P><STRONG><a name="[68]"></a>CoS_DCMI_DMAXferCplt</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, coliassense_camera.o(i.CoS_DCMI_DMAXferCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CoS_DCMI_DMAXferCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_ChangeMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coliassense_camera.o(i.CoS_CAM_DMASet)
</UL>
<P><STRONG><a name="[c8]"></a>CLEDCC_Init</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, coliassense_cled.o(i.CLEDCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLEDCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Init
</UL>

<P><STRONG><a name="[a0]"></a>CLED_ColorCalc</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, coliassense_cled.o(i.CLED_ColorCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLED_ColorCalc &rArr; __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_LED_Update
</UL>

<P><STRONG><a name="[a2]"></a>CLED_RandomGo</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, coliassense_cled.o(i.CLED_RandomGo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLED_RandomGo &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_setRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_LED_Update
</UL>

<P><STRONG><a name="[c4]"></a>CoS_CLED_GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, coliassense_cled.o(i.CoS_CLED_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoS_CLED_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Init
</UL>

<P><STRONG><a name="[c6]"></a>CoS_RNG_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, coliassense_cled.o(i.CoS_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CoS_RNG_Init &rArr; HAL_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Init
</UL>

<P><STRONG><a name="[c7]"></a>CoS_TIM1_Init</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, coliassense_cled.o(i.CoS_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CoS_TIM1_Init &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_CLED_Init
</UL>

<P><STRONG><a name="[106]"></a>sI2C_IO_Init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, coliassense_interfaces.o(i.sI2C_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sI2C_IO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_Init
</UL>

<P><STRONG><a name="[17f]"></a>sI2C_NoAck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, coliassense_interfaces.o(i.sI2C_NoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sI2C_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_ReadReg
</UL>

<P><STRONG><a name="[180]"></a>sI2C_Read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, coliassense_interfaces.o(i.sI2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sI2C_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_ReadReg
</UL>

<P><STRONG><a name="[10a]"></a>sI2C_ReadReg</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, coliassense_interfaces.o(i.sI2C_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sI2C_ReadReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WaitAck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Stop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_NoAck
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_ReadReg
</UL>

<P><STRONG><a name="[181]"></a>sI2C_Start</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, coliassense_interfaces.o(i.sI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sI2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_ReadReg
</UL>

<P><STRONG><a name="[107]"></a>sI2C_Stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, coliassense_interfaces.o(i.sI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sI2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_ReadReg
</UL>

<P><STRONG><a name="[183]"></a>sI2C_WaitAck</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, coliassense_interfaces.o(i.sI2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sI2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_ReadReg
</UL>

<P><STRONG><a name="[182]"></a>sI2C_Write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, coliassense_interfaces.o(i.sI2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_ReadReg
</UL>

<P><STRONG><a name="[10b]"></a>sI2C_WriteReg</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, coliassense_interfaces.o(i.sI2C_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sI2C_WriteReg &rArr; sI2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_WaitAck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Stop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sI2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_sI2C_WriteReg
</UL>

<P><STRONG><a name="[fa]"></a>CoS_UART_ByteDeal</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, coliassense_uart.o(i.CoS_UART_ByteDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CoS_UART_ByteDeal &rArr; CoS_UART_RxRST
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_RxRST
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_ReceiveByte
</UL>

<P><STRONG><a name="[fd]"></a>CoS_UART_PeripheralInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, coliassense_uart.o(i.CoS_UART_PeripheralInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CoS_UART_PeripheralInit &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>CoS_UART_RegInit</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, coliassense_uart.o(i.CoS_UART_RegInit))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_Init
</UL>

<P><STRONG><a name="[152]"></a>UART_CPtP_frameEnd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coliassense_uart.o(i.UART_CPtP_frameEnd))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit_run
</UL>

<P><STRONG><a name="[153]"></a>UART_CPtP_frameStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coliassense_uart.o(i.UART_CPtP_frameStart))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit_run
</UL>

<P><STRONG><a name="[154]"></a>UART_transmit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, coliassense_uart.o(i.UART_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmit_run
</UL>

<P><STRONG><a name="[ac]"></a>CoS_BIO_Keys_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, coliassense_bio.o(i.CoS_BIO_Keys_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoS_BIO_Keys_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[ab]"></a>CoS_BIO_LED_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, coliassense_bio.o(i.CoS_BIO_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoS_BIO_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[a8]"></a>CoS_GPIO_Init</STRONG> (Thumb, 438 bytes, Stack size 80 bytes, coliassense_bio.o(i.CoS_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CoS_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[a6]"></a>CoS_SystemClock_Config</STRONG> (Thumb, 196 bytes, Stack size 152 bytes, coliassense_bio.o(i.CoS_SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CoS_SystemClock_Config &rArr; HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[a9]"></a>CoS_TIM2_Init</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, coliassense_bio.o(i.CoS_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoS_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>CoS_TIM3_Init</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, coliassense_bio.o(i.CoS_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoS_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackgroundTask_Disable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, coliassense_bio.o(i.HAL_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_NVIC_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_BIO_Init
</UL>

<P><STRONG><a name="[df]"></a>motion_reg_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, coliassence_motion.o(i.motion_reg_init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_Motion_Init
</UL>

<P><STRONG><a name="[cf]"></a>CoS_ExBD_IO_Init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, coliassense_exbd.o(i.CoS_ExBD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoS_ExBD_IO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_EXBD_Init
</UL>

<P><STRONG><a name="[165]"></a>UT_Help</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_terminal.o(i.UT_Help))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UT_Help
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoS_UART_sendFrame
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_argCheck
</UL>

<P><STRONG><a name="[185]"></a>timed_data_set_period</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_terminal.o(i.timed_data_set_period))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_set
</UL>

<P><STRONG><a name="[184]"></a>timed_data_set_start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_terminal.o(i.timed_data_set_start))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_set
</UL>

<P><STRONG><a name="[186]"></a>timed_data_set_task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_terminal.o(i.timed_data_set_task))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timed_data_set
</UL>

<P><STRONG><a name="[69]"></a>DCMI_DMAError</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_dcmi.o(i.DCMI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
<LI> stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[6a]"></a>DCMI_DMAXferCplt</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_hal_dcmi.o(i.DCMI_DMAXferCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_DMAXferCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_ChangeMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[11e]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[11d]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[11f]"></a>DMA_SetConfig</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[11b]"></a>DMA_MultiBufferSetConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma_ex.o(i.DMA_MultiBufferSetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
</UL>

<P><STRONG><a name="[12a]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[12c]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[12e]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[130]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[131]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[12b]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[12d]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[135]"></a>UART_SetConfig</STRONG> (Thumb, 822 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[172]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[17d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[83]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[8b]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
